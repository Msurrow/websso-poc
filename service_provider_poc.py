from flask import Flask, request, redirect
import base64
import sys
from time import gmtime, strftime
app = Flask(__name__)

"""
Config vars for PoC
"""
idp_url = "https://idp.ssocircle.com:443/sso/SSOPOST/metaAlias/publicidp"
# authnrequest_ID = ""
# authnrequest_issueInstant = "" #Format from SSOCircle example: 2017-07-13T18:35:07Z
# authnrequest_binding = "" #From SSOCircle example: SAML2_BINDINGS_POST
# authnrequest_assertionConsumerServiceURL = ""
# authnrequest_issuer = ""
# authnrequest_spNameQualifier = ""

# from time import gmtime, strftime
# strftime("%Y-%m-%d %H:%M:%S %Z", gmtime())

saml_authnrequest = """
<samlp:AuthnRequest xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" ID="somerandomID1234abcd1234abcd" Version="2.0" IssueInstant="2017-07-13T10:37:02Z" ForceAuthn="false" IsPassive="false" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" AssertionConsumerServiceURL="http://websso-poc.herokuapp.com/kai-themes">
	<saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">
          http://websso-poc.herokuapp.com
    </saml:Issuer>
	<samlp:NameIDPolicy xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent" SPNameQualifier="http://websso-poc.herokuapp.com" AllowCreate="true">
	</samlp:NameIDPolicy>
	<samlp:RequestedAuthnContext xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" Comparison="exact">
		<saml:AuthnContextClassRef xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">
			urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
		</saml:AuthnContextClassRef>
	</samlp:RequestedAuthnContext>
</samlp:AuthnRequest>
"""
#.format(authnrequest_ID, authnrequest_issueInstant, authnrequest_binding, authnrequest_assertionConsumerServiceURL, authnrequest_spNameQualifier)

# Generated by using SSOCircle Encode tool on the string above (https://www.ssocircle.com/en/1203/saml-request-online-decoder-encoder/)
saml_authnrequest_encoded = "PHNhbWxwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBJRD0ic29tZXJhbmRvbUlEMTIzNGFiY2QxMjM0YWJjZCIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMTctMDctMTNUMTA6Mzc6MDJaIiBGb3JjZUF1dGhuPSJmYWxzZSIgSXNQYXNzaXZlPSJmYWxzZSIgUHJvdG9jb2xCaW5kaW5nPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YmluZGluZ3M6SFRUUC1QT1NUIiBBc3NlcnRpb25Db25zdW1lclNlcnZpY2VVUkw9Imh0dHA6Ly93ZWJzc28tcG9jLmhlcm9rdWFwcC5jb20va2FpLXRoZW1lcyI+DQoJPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPg0KICAgICAgICAgIGh0dHA6Ly93ZWJzc28tcG9jLmhlcm9rdWFwcC5jb20NCiAgICA8L3NhbWw6SXNzdWVyPg0KCTxzYW1scDpOYW1lSURQb2xpY3kgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50IiBTUE5hbWVRdWFsaWZpZXI9Imh0dHA6Ly93ZWJzc28tcG9jLmhlcm9rdWFwcC5jb20iIEFsbG93Q3JlYXRlPSJ0cnVlIj4NCgk8L3NhbWxwOk5hbWVJRFBvbGljeT4NCgk8c2FtbHA6UmVxdWVzdGVkQXV0aG5Db250ZXh0IHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIENvbXBhcmlzb249ImV4YWN0Ij4NCgkJPHNhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWYgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+DQoJCQl1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydA0KCQk8L3NhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY+DQoJPC9zYW1scDpSZXF1ZXN0ZWRBdXRobkNvbnRleHQ+DQo8L3NhbWxwOkF1dGhuUmVxdWVzdD4="

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'GET':
    	return 'Simple WebSSO PoC. Do a GET to /kai-themes'
    if request.method == 'POST':
    	return "POST request headers:\n{}<br/><br/>POST request data:\n{}<br/><br/>REQUEST ARGS:{}".format(request.headers, request.data, list(request.args.items()))

@app.route('/kai-themes')
def kai_themes():
	# Check if get request has SAML Token
	print("REQUEST HEADERS: {}\n\nREQUEST ARGS:{}".format(request.headers, list(request.args.items())))
	saml_token = request.args.get('SAMLResponse')
	if saml_token:
		return '{The list of KAI-themes as JSON}'
	else:
		#saml_authnrequest_b64 = base64.b64encode(bytes(saml_authnrequest, 'utf-8'))
		return redirect("{}?SAMLRequest={}".format(idp_url,saml_authnrequest_encoded))


if __name__ == "__main__":
	app.run(debug=True, host="0.0.0.0",port=int(sys.argv[1]))
