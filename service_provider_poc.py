from flask import Flask, request, redirect
import base64
import sys
from time import gmtime, strftime
app = Flask(__name__)

"""
Config vars for PoC
"""
idp_url = "https://idp.ssocircle.com:443/sso/SSORedirect/metaAlias/publicidp"
# authnrequest_ID = ""
# authnrequest_issueInstant = "" #Format from SSOCircle example: 2017-07-13T18:35:07Z
# authnrequest_binding = "" #From SSOCircle example: SAML2_BINDINGS_POST
# authnrequest_assertionConsumerServiceURL = ""
# authnrequest_issuer = ""
# authnrequest_spNameQualifier = ""

# from time import gmtime, strftime
# strftime("%Y-%m-%d %H:%M:%S %Z", gmtime())

saml_authnrequest = """
<samlp:AuthnRequest xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" 
					ID="somerandomID1234abcd1234abcd" Version="2.0" 
					IssueInstant="2017-07-13T10:37:02Z" 
					ForceAuthn="false" 
					IsPassive="false" 
					ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-REDIRECT"
					AssertionConsumerServiceURL="http://websso-poc.herokuapp.com/kai-themes"
	<saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">
          http://websso-poc.herokuapp.com
    </saml:Issuer>
	<samlp:NameIDPolicy xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" 
						Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
						SPNameQualifier="http://websso-poc.herokuapp.com"
						AllowCreate="true">
	</samlp:NameIDPolicy>
	<samlp:RequestedAuthnContext xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" Comparison="exact">
		<saml:AuthnContextClassRef xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">
			urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
		</saml:AuthnContextClassRef>
	</samlp:RequestedAuthnContext>
</samlp:AuthnRequest>
"""
#.format(authnrequest_ID, authnrequest_issueInstant, authnrequest_binding, authnrequest_assertionConsumerServiceURL, authnrequest_spNameQualifier)

# Generated by using SSOCircle Encode tool on the string above (https://www.ssocircle.com/en/1203/saml-request-online-decoder-encoder/)
saml_authnrequest_b64 = "pVRda9swFH1uof8h6N2xkxQCIg5kTscM7fAcbw97U%2BSbRVSWNF25yf79JDfOTLul0OnFoPtxzrnnygtkjTR01bq9KuFnC%2BhGx0YqpF0gJa1VVDMUSBVrAKnjdLN6uKfTcUKN1U5zLcno5voqnHydEtQNWKZq3eTryXR2y7a87r9k9A0sCq1S4uv%2FlCG2kCt0TDkfSSbzKJlHk1k1SehsTpPp93PqR205dGxTsmMSYdCkYIjiCV4GihPLD0LVQv24LGn7nIT0U1UVUXm3zsu7rCKnVitEsM7zz7TC1uvcgH0SHL6W9ynZO2doHB9gi6gjo%2Fl4D1Y%2FtsyYMddN%2FMhE5PbgEUO7RZgv7ZTbwcQvs2M9PlneXI%2FO5w3k59RFPEBc9gwM%2FexR8nWhpeC%2F%2FsP64EzD3OWqcCPqaNelUhN2AR0o18%2F3alMEOl9aJsVOgH1zqOfClZT6kFlgzvvvbAukkxi%2F1jiQflp4qLuF8p46OL5r%2FTPdGGYFhsWGI%2BOuQz95PGyeSW9hCbv3Oe51XszllIf%2B%2Fjo8hYO2ddh94F5h5Z8kGm1dxyv%2BJ7Hh1P46Hp%2FQx4c%2FjeVv"

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'GET':
    	return 'Simple WebSSO PoC. Do a GET to /kai-themes'
    if request.method == 'POST':
    	return "POST request headers: {}<br/><br/>POST request data:{}".format(request.headers, request.data)

@app.route('/kai-themes')
def kai_themes():
	# Check if get request has SAML Token
	print("REQUEST HEADERS: {}\n\n\nREQUEST ARGS:{}".format(request.headers, request.args))
	saml_token = request.args.get('SAMLResponse')
	if saml_token:
		return '{The list of KAI-themes as JSON}'
	else:
		#saml_authnrequest_b64 = base64.b64encode(bytes(saml_authnrequest, 'utf-8'))
		return redirect("{}?SAMLRequest?={}".format(idp_url,saml_authnrequest_b64))


if __name__ == "__main__":
	app.run(debug=True, host="0.0.0.0",port=int(sys.argv[1]))
